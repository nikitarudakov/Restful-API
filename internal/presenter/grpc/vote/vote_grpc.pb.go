// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: protos/vote.proto

package vote

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoteControllerClient is the client API for VoteController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoteControllerClient interface {
	Vote(ctx context.Context, in *VoteArg, opts ...grpc.CallOption) (*Empty, error)
	RetractVote(ctx context.Context, in *RetractArg, opts ...grpc.CallOption) (*Empty, error)
	GetRating(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Rating, error)
}

type voteControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewVoteControllerClient(cc grpc.ClientConnInterface) VoteControllerClient {
	return &voteControllerClient{cc}
}

func (c *voteControllerClient) Vote(ctx context.Context, in *VoteArg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/vote.VoteController/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteControllerClient) RetractVote(ctx context.Context, in *RetractArg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/vote.VoteController/RetractVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteControllerClient) GetRating(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Rating, error) {
	out := new(Rating)
	err := c.cc.Invoke(ctx, "/vote.VoteController/GetRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoteControllerServer is the server API for VoteController service.
// All implementations must embed UnimplementedVoteControllerServer
// for forward compatibility
type VoteControllerServer interface {
	Vote(context.Context, *VoteArg) (*Empty, error)
	RetractVote(context.Context, *RetractArg) (*Empty, error)
	GetRating(context.Context, *Target) (*Rating, error)
	mustEmbedUnimplementedVoteControllerServer()
}

// UnimplementedVoteControllerServer must be embedded to have forward compatible implementations.
type UnimplementedVoteControllerServer struct {
}

func (UnimplementedVoteControllerServer) Vote(context.Context, *VoteArg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedVoteControllerServer) RetractVote(context.Context, *RetractArg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetractVote not implemented")
}
func (UnimplementedVoteControllerServer) GetRating(context.Context, *Target) (*Rating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRating not implemented")
}
func (UnimplementedVoteControllerServer) mustEmbedUnimplementedVoteControllerServer() {}

// UnsafeVoteControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoteControllerServer will
// result in compilation errors.
type UnsafeVoteControllerServer interface {
	mustEmbedUnimplementedVoteControllerServer()
}

func RegisterVoteControllerServer(s grpc.ServiceRegistrar, srv VoteControllerServer) {
	s.RegisterService(&VoteController_ServiceDesc, srv)
}

func _VoteController_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteControllerServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vote.VoteController/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteControllerServer).Vote(ctx, req.(*VoteArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteController_RetractVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetractArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteControllerServer).RetractVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vote.VoteController/RetractVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteControllerServer).RetractVote(ctx, req.(*RetractArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteController_GetRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteControllerServer).GetRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vote.VoteController/GetRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteControllerServer).GetRating(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

// VoteController_ServiceDesc is the grpc.ServiceDesc for VoteController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoteController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vote.VoteController",
	HandlerType: (*VoteControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vote",
			Handler:    _VoteController_Vote_Handler,
		},
		{
			MethodName: "RetractVote",
			Handler:    _VoteController_RetractVote_Handler,
		},
		{
			MethodName: "GetRating",
			Handler:    _VoteController_GetRating_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/vote.proto",
}
