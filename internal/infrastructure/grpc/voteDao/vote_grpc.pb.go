// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: protos/vote.proto

package voteDao

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoteRepoClient is the client API for VoteRepo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoteRepoClient interface {
	FindVoteInStorage(ctx context.Context, in *VoteFilter, opts ...grpc.CallOption) (*Vote, error)
	InsertVoteToStorage(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*InsertResult, error)
	DeleteVoteFromStorage(ctx context.Context, in *VoteFilter, opts ...grpc.CallOption) (*Empty, error)
	GetRating(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Rating, error)
}

type voteRepoClient struct {
	cc grpc.ClientConnInterface
}

func NewVoteRepoClient(cc grpc.ClientConnInterface) VoteRepoClient {
	return &voteRepoClient{cc}
}

func (c *voteRepoClient) FindVoteInStorage(ctx context.Context, in *VoteFilter, opts ...grpc.CallOption) (*Vote, error) {
	out := new(Vote)
	err := c.cc.Invoke(ctx, "/voteDao.VoteRepo/FindVoteInStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteRepoClient) InsertVoteToStorage(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*InsertResult, error) {
	out := new(InsertResult)
	err := c.cc.Invoke(ctx, "/voteDao.VoteRepo/InsertVoteToStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteRepoClient) DeleteVoteFromStorage(ctx context.Context, in *VoteFilter, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/voteDao.VoteRepo/DeleteVoteFromStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteRepoClient) GetRating(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Rating, error) {
	out := new(Rating)
	err := c.cc.Invoke(ctx, "/voteDao.VoteRepo/GetRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoteRepoServer is the server API for VoteRepo service.
// All implementations must embed UnimplementedVoteRepoServer
// for forward compatibility
type VoteRepoServer interface {
	FindVoteInStorage(context.Context, *VoteFilter) (*Vote, error)
	InsertVoteToStorage(context.Context, *Vote) (*InsertResult, error)
	DeleteVoteFromStorage(context.Context, *VoteFilter) (*Empty, error)
	GetRating(context.Context, *Target) (*Rating, error)
	mustEmbedUnimplementedVoteRepoServer()
}

// UnimplementedVoteRepoServer must be embedded to have forward compatible implementations.
type UnimplementedVoteRepoServer struct {
}

func (UnimplementedVoteRepoServer) FindVoteInStorage(context.Context, *VoteFilter) (*Vote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindVoteInStorage not implemented")
}
func (UnimplementedVoteRepoServer) InsertVoteToStorage(context.Context, *Vote) (*InsertResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertVoteToStorage not implemented")
}
func (UnimplementedVoteRepoServer) DeleteVoteFromStorage(context.Context, *VoteFilter) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVoteFromStorage not implemented")
}
func (UnimplementedVoteRepoServer) GetRating(context.Context, *Target) (*Rating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRating not implemented")
}
func (UnimplementedVoteRepoServer) mustEmbedUnimplementedVoteRepoServer() {}

// UnsafeVoteRepoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoteRepoServer will
// result in compilation errors.
type UnsafeVoteRepoServer interface {
	mustEmbedUnimplementedVoteRepoServer()
}

func RegisterVoteRepoServer(s grpc.ServiceRegistrar, srv VoteRepoServer) {
	s.RegisterService(&VoteRepo_ServiceDesc, srv)
}

func _VoteRepo_FindVoteInStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteRepoServer).FindVoteInStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voteDao.VoteRepo/FindVoteInStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteRepoServer).FindVoteInStorage(ctx, req.(*VoteFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteRepo_InsertVoteToStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteRepoServer).InsertVoteToStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voteDao.VoteRepo/InsertVoteToStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteRepoServer).InsertVoteToStorage(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteRepo_DeleteVoteFromStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteRepoServer).DeleteVoteFromStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voteDao.VoteRepo/DeleteVoteFromStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteRepoServer).DeleteVoteFromStorage(ctx, req.(*VoteFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteRepo_GetRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteRepoServer).GetRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voteDao.VoteRepo/GetRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteRepoServer).GetRating(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

// VoteRepo_ServiceDesc is the grpc.ServiceDesc for VoteRepo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoteRepo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voteDao.VoteRepo",
	HandlerType: (*VoteRepoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindVoteInStorage",
			Handler:    _VoteRepo_FindVoteInStorage_Handler,
		},
		{
			MethodName: "InsertVoteToStorage",
			Handler:    _VoteRepo_InsertVoteToStorage_Handler,
		},
		{
			MethodName: "DeleteVoteFromStorage",
			Handler:    _VoteRepo_DeleteVoteFromStorage_Handler,
		},
		{
			MethodName: "GetRating",
			Handler:    _VoteRepo_GetRating_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/vote.proto",
}
