// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: user.proto

package userDao

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserRepoClient is the client API for UserRepo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRepoClient interface {
	FindUserInStorage(ctx context.Context, in *Username, opts ...grpc.CallOption) (*User, error)
	InsertUserToStorage(ctx context.Context, in *User, opts ...grpc.CallOption) (*InsertResult, error)
	DeleteUserFromStorage(ctx context.Context, in *Username, opts ...grpc.CallOption) (*Empty, error)
	UpdateUsernameInStorage(ctx context.Context, in *UserReplace, opts ...grpc.CallOption) (*Empty, error)
	UpdatePasswordInStorage(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
}

type userRepoClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRepoClient(cc grpc.ClientConnInterface) UserRepoClient {
	return &userRepoClient{cc}
}

func (c *userRepoClient) FindUserInStorage(ctx context.Context, in *Username, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/userDao.UserRepo/FindUserInStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepoClient) InsertUserToStorage(ctx context.Context, in *User, opts ...grpc.CallOption) (*InsertResult, error) {
	out := new(InsertResult)
	err := c.cc.Invoke(ctx, "/userDao.UserRepo/InsertUserToStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepoClient) DeleteUserFromStorage(ctx context.Context, in *Username, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/userDao.UserRepo/DeleteUserFromStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepoClient) UpdateUsernameInStorage(ctx context.Context, in *UserReplace, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/userDao.UserRepo/UpdateUsernameInStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepoClient) UpdatePasswordInStorage(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/userDao.UserRepo/UpdatePasswordInStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRepoServer is the server API for UserRepo service.
// All implementations must embed UnimplementedUserRepoServer
// for forward compatibility
type UserRepoServer interface {
	FindUserInStorage(context.Context, *Username) (*User, error)
	InsertUserToStorage(context.Context, *User) (*InsertResult, error)
	DeleteUserFromStorage(context.Context, *Username) (*Empty, error)
	UpdateUsernameInStorage(context.Context, *UserReplace) (*Empty, error)
	UpdatePasswordInStorage(context.Context, *User) (*Empty, error)
	mustEmbedUnimplementedUserRepoServer()
}

// UnimplementedUserRepoServer must be embedded to have forward compatible implementations.
type UnimplementedUserRepoServer struct {
}

func (UnimplementedUserRepoServer) FindUserInStorage(context.Context, *Username) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserInStorage not implemented")
}
func (UnimplementedUserRepoServer) InsertUserToStorage(context.Context, *User) (*InsertResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUserToStorage not implemented")
}
func (UnimplementedUserRepoServer) DeleteUserFromStorage(context.Context, *Username) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserFromStorage not implemented")
}
func (UnimplementedUserRepoServer) UpdateUsernameInStorage(context.Context, *UserReplace) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsernameInStorage not implemented")
}
func (UnimplementedUserRepoServer) UpdatePasswordInStorage(context.Context, *User) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswordInStorage not implemented")
}
func (UnimplementedUserRepoServer) mustEmbedUnimplementedUserRepoServer() {}

// UnsafeUserRepoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRepoServer will
// result in compilation errors.
type UnsafeUserRepoServer interface {
	mustEmbedUnimplementedUserRepoServer()
}

func RegisterUserRepoServer(s grpc.ServiceRegistrar, srv UserRepoServer) {
	s.RegisterService(&UserRepo_ServiceDesc, srv)
}

func _UserRepo_FindUserInStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepoServer).FindUserInStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userDao.UserRepo/FindUserInStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepoServer).FindUserInStorage(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepo_InsertUserToStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepoServer).InsertUserToStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userDao.UserRepo/InsertUserToStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepoServer).InsertUserToStorage(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepo_DeleteUserFromStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepoServer).DeleteUserFromStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userDao.UserRepo/DeleteUserFromStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepoServer).DeleteUserFromStorage(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepo_UpdateUsernameInStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReplace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepoServer).UpdateUsernameInStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userDao.UserRepo/UpdateUsernameInStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepoServer).UpdateUsernameInStorage(ctx, req.(*UserReplace))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepo_UpdatePasswordInStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepoServer).UpdatePasswordInStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userDao.UserRepo/UpdatePasswordInStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepoServer).UpdatePasswordInStorage(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRepo_ServiceDesc is the grpc.ServiceDesc for UserRepo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRepo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userDao.UserRepo",
	HandlerType: (*UserRepoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindUserInStorage",
			Handler:    _UserRepo_FindUserInStorage_Handler,
		},
		{
			MethodName: "InsertUserToStorage",
			Handler:    _UserRepo_InsertUserToStorage_Handler,
		},
		{
			MethodName: "DeleteUserFromStorage",
			Handler:    _UserRepo_DeleteUserFromStorage_Handler,
		},
		{
			MethodName: "UpdateUsernameInStorage",
			Handler:    _UserRepo_UpdateUsernameInStorage_Handler,
		},
		{
			MethodName: "UpdatePasswordInStorage",
			Handler:    _UserRepo_UpdatePasswordInStorage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
